// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var tides: Tides {
        Tides(path: "/tides")
    }

    public struct Tides {
        /// Path: `/tides`
        public let path: String

        /// Get Tides prediction
        ///
        /// Endpoint https://api.marea.ooo/v2/tides for getting Tide predictions like extremes and water level.
        /// 
        /// To get the prediction you need to specify `latitude`, `longitude` coordinates to get nearest tide forecast or set `station_id` parameter to get forecast from the particular station.
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            Request(method: "GET", url: path, query: parameters?.asQuery, id: "getTides")
        }

        public struct GetResponse: Decodable {
            /// Marea API disclaimer
            public var disclaimer: String
            /// Response status
            public var status: Double
            /// Requested latitude
            ///
            /// Example: 9.7384806
            public var latitude: Double
            /// Requested longitude
            ///
            /// Example: -82.8407626
            public var longitude: Double
            /// Nearest location for requested coordinates with tide predictions available
            public var origin: Origin
            /// Tidal datums
            public var datums: Marea.Datums
            /// Requested timestamp
            ///
            /// Example: 1633436761
            public var timestamp: Double
            /// Timestamp as datetime in timezone specified in timezone field
            ///
            /// Example: "2021-10-05T12:26:01+00:00"
            public var datetime: String
            /// Unit for the prediction heights
            ///
            /// Example: "m"
            public var unit: String
            /// Datetime timezone
            ///
            /// Example: "UTC"
            public var timezone: String
            /// Reference Tidal datum
            ///
            /// Example: "MSL"
            public var datum: String
            /// List of low and high tides
            public var extremes: [Extreme]
            /// List of water levels with requested interval
            public var heights: [Height]
            /// Prediction source. It can return model ID OR "STATION"
            ///
            /// Example: "STATION"
            public var source: Source
            /// Prediction source copyright
            ///
            /// Example: "©2021 Marea | Piccioni, Gaia; Dettmering, Denise; Bosch, Wolfgang; Seitz, Florian (2018): TICON: Tidal Constants based on GESLA sea-level records from globally distributed tide gauges (data). PANGAEA, https://doi.org/10.1594/PANGAEA.896587, Supplement to: Piccioni, G et al. (2019): TICON: TIdal CONstants based on GESLA sea‐level records from globally located tide gauges. Geoscience Data Journal, 6(2), 97-104, https://doi.org/10.1002/gdj3.72"
            public var copyright: String

            /// Nearest location for requested coordinates with tide predictions available
            public struct Origin: Decodable {
                /// Origin latitude
                ///
                /// Example: 9.9883
                public var latitude: Double
                /// Origin longitude
                ///
                /// Example: -83.02
                public var longitude: Double
                /// Origin distance from requested coordinates
                ///
                /// Example: 33.911847
                public var distance: Double
                /// Distance unit
                public var unit: String
                /// Origin tide station (in case the prediction is from known station)
                public var station: Station?

                /// Origin tide station (in case the prediction is from known station)
                public struct Station: Decodable {
                    /// Station ID
                    ///
                    /// Example: "TICON:3fe9da7c30"
                    public var id: String
                    /// Station name
                    ///
                    /// Example: "Limon-B, Costa Rica"
                    public var name: String
                    /// Station provider
                    ///
                    /// Example: "Univ. Hawaii Sea Level Center (UHSLC)"
                    public var provider: String

                    public init(id: String, name: String, provider: String) {
                        self.id = id
                        self.name = name
                        self.provider = provider
                    }

                    public init(from decoder: Decoder) throws {
                        let values = try decoder.container(keyedBy: StringCodingKey.self)
                        self.id = try values.decode(String.self, forKey: "id")
                        self.name = try values.decode(String.self, forKey: "name")
                        self.provider = try values.decode(String.self, forKey: "provider")
                    }
                }

                public init(latitude: Double, longitude: Double, distance: Double, unit: String, station: Station? = nil) {
                    self.latitude = latitude
                    self.longitude = longitude
                    self.distance = distance
                    self.unit = unit
                    self.station = station
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.latitude = try values.decode(Double.self, forKey: "latitude")
                    self.longitude = try values.decode(Double.self, forKey: "longitude")
                    self.distance = try values.decode(Double.self, forKey: "distance")
                    self.unit = try values.decode(String.self, forKey: "unit")
                    self.station = try values.decodeIfPresent(Station.self, forKey: "station")
                }
            }

            /// High or Low tide
            public struct Extreme: Decodable {
                /// Timestamp of the extreme
                ///
                /// Example: 1633454033
                public var timestamp: Double
                /// Datetime of the extreme (using top level timezone)
                ///
                /// Example: "2021-10-05T17:13:53+00:00"
                public var datetime: String
                /// Extreme water level (using top level units and tidal datum reference)
                ///
                /// Example: 0.119
                public var height: Double
                /// Extreme state - "LOW TIDE" / "HIGH TIDE"
                ///
                /// Example: "HIGH TIDE"
                public var state: State

                /// Extreme state - "LOW TIDE" / "HIGH TIDE"
                ///
                /// Example: "HIGH TIDE"
                public enum State: String, Codable, CaseIterable {
                    case lowTide = "LOW TIDE"
                    case highTide = "HIGH TIDE"
                }

                public init(timestamp: Double, datetime: String, height: Double, state: State) {
                    self.timestamp = timestamp
                    self.datetime = datetime
                    self.height = height
                    self.state = state
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.timestamp = try values.decode(Double.self, forKey: "timestamp")
                    self.datetime = try values.decode(String.self, forKey: "datetime")
                    self.height = try values.decode(Double.self, forKey: "height")
                    self.state = try values.decode(State.self, forKey: "state")
                }
            }

            /// Water level prediction
            public struct Height: Decodable {
                /// Timestamp of the water level
                ///
                /// Example: 1633436761
                public var timestamp: Double
                /// Datetime of the waterlevel (using top level timezone)
                ///
                /// Example: "2021-10-05T12:26:01+00:00"
                public var datetime: String
                /// Water level (using top level units and tidal datum reference)
                ///
                /// Example: -0.001
                public var height: Double
                /// Water state - "FALLING" / "RISING"
                ///
                /// Example: "RISING"
                public var state: State

                /// Water state - "FALLING" / "RISING"
                ///
                /// Example: "RISING"
                public enum State: String, Codable, CaseIterable {
                    case falling = "FALLING"
                    case rising = "RISING"
                }

                public init(timestamp: Double, datetime: String, height: Double, state: State) {
                    self.timestamp = timestamp
                    self.datetime = datetime
                    self.height = height
                    self.state = state
                }

                public init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: StringCodingKey.self)
                    self.timestamp = try values.decode(Double.self, forKey: "timestamp")
                    self.datetime = try values.decode(String.self, forKey: "datetime")
                    self.height = try values.decode(Double.self, forKey: "height")
                    self.state = try values.decode(State.self, forKey: "state")
                }
            }

            /// Prediction source. It can return model ID OR "STATION"
            ///
            /// Example: "STATION"
            public enum Source: String, Codable, CaseIterable {
                case station = "STATION"
                case fes2014 = "FES2014"
                case eot20 = "EOT20"
            }

            public init(disclaimer: String, status: Double, latitude: Double, longitude: Double, origin: Origin, datums: Marea.Datums, timestamp: Double, datetime: String, unit: String, timezone: String, datum: String, extremes: [Extreme], heights: [Height], source: Source, copyright: String) {
                self.disclaimer = disclaimer
                self.status = status
                self.latitude = latitude
                self.longitude = longitude
                self.origin = origin
                self.datums = datums
                self.timestamp = timestamp
                self.datetime = datetime
                self.unit = unit
                self.timezone = timezone
                self.datum = datum
                self.extremes = extremes
                self.heights = heights
                self.source = source
                self.copyright = copyright
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.disclaimer = try values.decode(String.self, forKey: "disclaimer")
                self.status = try values.decode(Double.self, forKey: "status")
                self.latitude = try values.decode(Double.self, forKey: "latitude")
                self.longitude = try values.decode(Double.self, forKey: "longitude")
                self.origin = try values.decode(Origin.self, forKey: "origin")
                self.datums = try values.decode(Marea.Datums.self, forKey: "datums")
                self.timestamp = try values.decode(Double.self, forKey: "timestamp")
                self.datetime = try values.decode(String.self, forKey: "datetime")
                self.unit = try values.decode(String.self, forKey: "unit")
                self.timezone = try values.decode(String.self, forKey: "timezone")
                self.datum = try values.decode(String.self, forKey: "datum")
                self.extremes = try values.decode([Extreme].self, forKey: "extremes")
                self.heights = try values.decode([Height].self, forKey: "heights")
                self.source = try values.decode(Source.self, forKey: "source")
                self.copyright = try values.decode(String.self, forKey: "copyright")
            }
        }

        public struct GetParameters {
            /// Example: "1440"
            public var duration: String?
            public var timestamp: Int?
            public var radius: Int?
            /// Example: 60
            public var interval: Int?
            /// Example: 44.414
            public var latitude: Double?
            /// Example: -2.097
            public var longitude: Double?
            /// Example: "FES2014"
            public var model: Model?
            public var stationRadius: Int?
            public var stationID: String?
            /// Example: "MSL"
            public var datum: Datum?

            /// Example: "FES2014"
            public enum Model: String, Codable, CaseIterable {
                case fes2014 = "FES2014"
                case eot20 = "EOT20"
            }

            /// Example: "MSL"
            public enum Datum: String, Codable, CaseIterable {
                case lat = "LAT"
                case hat = "HAT"
                case mllw = "MLLW"
                case mhhw = "MHHW"
                case mhw = "MHW"
                case mlw = "MLW"
                case mtl = "MTL"
                case dtl = "DTL"
                case gt = "GT"
                case mn = "MN"
                case dhq = "DHQ"
                case dlq = "DLQ"
                case msl = "MSL"
            }

            public init(duration: String? = nil, timestamp: Int? = nil, radius: Int? = nil, interval: Int? = nil, latitude: Double? = nil, longitude: Double? = nil, model: Model? = nil, stationRadius: Int? = nil, stationID: String? = nil, datum: Datum? = nil) {
                self.duration = duration
                self.timestamp = timestamp
                self.radius = radius
                self.interval = interval
                self.latitude = latitude
                self.longitude = longitude
                self.model = model
                self.stationRadius = stationRadius
                self.stationID = stationID
                self.datum = datum
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(duration, forKey: "duration")
                encoder.encode(timestamp, forKey: "timestamp")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(interval, forKey: "interval")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(model, forKey: "model")
                encoder.encode(stationRadius, forKey: "station_radius")
                encoder.encode(stationID, forKey: "station_id")
                encoder.encode(datum, forKey: "datum")
                return encoder.items
            }
        }
    }
}
