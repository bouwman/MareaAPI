// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import Get
import URLQueryEncoder

extension Paths.Stations {
    public func stationID(_ stationID: String) -> WithStationID {
        WithStationID(path: "\(path)/\(stationID)")
    }

    public struct WithStationID {
        /// Path: `/stations/{station_id}`
        public let path: String

        /// Get Station detail
        ///
        /// Endpoint https://api.marea.ooo/v2/stations/{station_id} for getting Station detail
        public var get: Request<GetResponse> {
            Request(path: path, method: "GET", id: "getStation")
        }

        /// Station detail
        public struct GetResponse: Decodable, Sendable {
            /// Response status code
            ///
            /// Example: 200
            public var status: Int
            /// Station ID
            public var id: String
            /// Station name
            public var name: String
            /// Station latitude
            public var latitude: Double
            /// Station longitude
            public var longitude: Double
            /// Station provider
            public var provider: String
            /// Station type
            public var type: `Type`
            /// Tidal datums
            public var datums: Marea.Datums
            /// Station timezone
            public var timezone: String

            /// Station type
            public enum `Type`: String, Codable, CaseIterable, Sendable {
                case harmonic = "HARMONIC"
                case reference = "REFERENCE"
            }

            public init(status: Int, id: String, name: String, latitude: Double, longitude: Double, provider: String, type: `Type`, datums: Marea.Datums, timezone: String) {
                self.status = status
                self.id = id
                self.name = name
                self.latitude = latitude
                self.longitude = longitude
                self.provider = provider
                self.type = type
                self.datums = datums
                self.timezone = timezone
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: StringCodingKey.self)
                self.status = try values.decode(Int.self, forKey: "status")
                self.id = try values.decode(String.self, forKey: "id")
                self.name = try values.decode(String.self, forKey: "name")
                self.latitude = try values.decode(Double.self, forKey: "latitude")
                self.longitude = try values.decode(Double.self, forKey: "longitude")
                self.provider = try values.decode(String.self, forKey: "provider")
                self.type = try values.decode(`Type`.self, forKey: "type")
                self.datums = try values.decode(Marea.Datums.self, forKey: "datums")
                self.timezone = try values.decode(String.self, forKey: "timezone")
            }
        }
    }
}
